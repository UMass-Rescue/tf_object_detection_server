from tf_object_detection_util.inference_api import TFInference
from flask_ml_server import MLServer
from encoder_decoder import DTypes
import json
import numpy as np

class NumpyEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, np.ndarray):
            return obj.tolist()
        return json.JSONEncoder.default(self, obj)

class TFObjectDetectionServer:
    def __init__(self, path_to_frozen_graph:str, path_to_pbtxt:str, endpoint_name:str='object_detection'):
        '''
        path_to_frozen_graph - path to the frozen inference graph generated by the tensorflow object detection api.
        path_to_pbtxt - path to the .pxtxt file. this file contains the mapping of object names to unique IDs.
        endpoint_name - name of the endpoint for the object detection model on the server. clients 
            will need to make a request to 'http://host:port/endpoint' to use the object detection model.
        '''
        self.inf = TFInference(path_to_frozen_graph, path_to_pbtxt)
        self.server = MLServer(__name__)
        @self.server.route(f'/{endpoint_name}',input_type=DTypes.FLOAT_NDARRAY, output_type=DTypes.STRING)
        def predict(image):
            res, _ = self.inf.predict(image)
            res = json.dumps(res, cls=NumpyEncoder)
            return res
    
    def run(self, host=None, port=None, debug=None, load_dotenv=True, **options):
        '''
        Runs the application on a local development server.

        Do not use ``run()`` in a production setting. It is not intended to
        meet security and performance requirements for a production server.
        Instead, see :ref:`deployment` for WSGI server recommendations.


        If the :attr:`debug` flag is set the server will automatically reload
        for code changes and show a debugger in case an exception happened.


        If you want to run the application in debug mode, but disable the
        code execution on the interactive debugger, you can pass
        ``use_evalex=False`` as parameter.  This will keep the debugger's
        traceback screen active, but disable code execution.


        :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to
            have the server available externally as well. Defaults to
            ``'127.0.0.1'`` or the host in the ``SERVER_NAME`` config variable
            if present.
        :param port: the port of the webserver. Defaults to ``5000`` or the
            port defined in the ``SERVER_NAME`` config variable if present.
        :param debug: if given, enable or disable debug mode. See
            :attr:`debug`.
        :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`
            files to set environment variables. Will also change the working
            directory to the directory containing the first file found.
        :param options: the options to be forwarded to the underlying Werkzeug
            server. See :func:`werkzeug.serving.run_simple` for more
            information.
        '''
        self.server.run(host, port, debug, load_dotenv, **options)